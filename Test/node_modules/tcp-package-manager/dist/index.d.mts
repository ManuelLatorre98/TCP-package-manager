declare class ApiResponse {
    code: number;
    message: string;
    constructor(code: number, message: string);
}

declare class PackageManager {
    private messageBuffer;
    private messageLength;
    private msgPointer;
    private decodedMsg;
    private amountOfBytes;
    private messageReaded;
    private lengthBytes;
    private subArrayLengthBytes;
    private lengthReaded;
    constructor();
    /**
     * Handles the received data, either in string or buffer format.
     * If a string is received, it converts it to Buffer in UTF-8 format.
     * Reads the received data to determine the message length and the message itself.
     *
     * @param data The received data, can be a string or a buffer.
     * @returns An array with the decoded messages.
     */
    manageData(data: string | Buffer): Buffer[];
    /**
     * Reads the length of the message from the data buffer.
     *
     * @param data The buffer containing the data.
     */
    private readMessageLength;
    /**
     * Reads the message from the data buffer.
     *
     * @param data The buffer containing the message.
    */
    private readMessage;
    /**
     * Resets the variables to start reading a new message.
     */
    private startNewMessage;
    /**
     * Handles the received message data.
     *
     * @param messageData The buffer containing the message data.
     * @returns The complete message bytes if available, otherwise null.
     */
    private handleMessageData;
    /**
     * Translates an array of message bytes into an array of parsed messages.
     *
     * @param messagesBytes An array containing the message bytes to translate.
     * @returns An array of parsed messages.
    */
    translateMessages(messagesBytes: Buffer[]): any[];
    /**
     * Sends a message over the provided socket.
     *
     * @param socket The socket to send the message through.
     * @param message The message to send.
     * @returns A Promise that resolves with an ApiResponse if the message is successfully sent, or rejects with an ApiResponse if there is an error.
    */
    sendMessage(socket: any, message: string): Promise<ApiResponse>;
}

export { PackageManager };
